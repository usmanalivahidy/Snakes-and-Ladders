[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\usman\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\usman\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 1.8.0_361)
[debug]       Load.loadUnit: plugins took 232.1084ms
[debug]       Load.loadUnit: defsScala took 0.8561ms
[debug] [Loading] Scanning directory C:\Users\usman\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\usman\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 58.2941 ms
[debug]           Load.resolveProject(global-plugins) took 653.6721ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\usman\.sbt\1.0\plugins, plugins: List(<none>))) took 782.4453ms
[debug] [Loading] Done in C:\Users\usman\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 838.3735ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.6305ms
[debug]     Load.loadUnit(file:/C:/Users/usman/.sbt/1.0/plugins/, ...) took 1090.1471ms
[debug]   Load.apply: load took 1627.2099ms
[debug]   Load.apply: resolveProjects took 19.5109ms
[debug]   Load.apply: finalTransforms took 150.8927ms
[debug]   Load.apply: config.delegates took 21.8943ms
[debug]   Load.apply: Def.make(settings)... took 927.0427ms
[debug]   Load.apply: structureIndex took 225.6416ms
[debug]   Load.apply: mkStreams took 4.3285ms
[info] loading global plugins from C:\Users\usman\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 6244.5793ms
[debug]           Load.loadUnit: plugins took 89.5797ms
[debug]           Load.loadUnit: defsScala took 0.0141ms
[debug] [Loading] Scanning directory C:\Users\usman\OneDrive\Desktop\addressapp\project
[debug]             Load.loadUnit: mkEval took 26.3869ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\usman\OneDrive\Desktop\addressapp\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 6.4874 ms
[info] loading settings for project addressapp-build from idea.sbt ...
[debug]               Load.resolveProject(addressapp-build) took 18.2131ms
[debug]             Load.loadTransitive: finalizeProject(Project(id addressapp-build, base: C:\Users\usman\OneDrive\Desktop\addressapp\project, plugins: List(<none>))) took 27.6267ms
[debug] [Loading] Done in C:\Users\usman\OneDrive\Desktop\addressapp\project, returning: (addressapp-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 429.3029ms
[debug]           Load.loadUnit: cleanEvalClasses took 11.6583ms
[debug]         Load.loadUnit(file:/C:/Users/usman/OneDrive/Desktop/addressapp/project/, ...) took 535.0103ms
[debug]       Load.apply: load took 539.4428ms
[debug]       Load.apply: resolveProjects took 0.3693ms
[debug]       Load.apply: finalTransforms took 20.0723ms
[debug]       Load.apply: config.delegates took 1.0286ms
[debug]       Load.apply: Def.make(settings)... took 186.4318ms
[debug]       Load.apply: structureIndex took 63.5947ms
[debug]       Load.apply: mkStreams took 0.0043ms
[info] loading project definition from C:\Users\usman\OneDrive\Desktop\addressapp\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3991.5059ms
[debug]     Load.loadUnit: defsScala took 0.0042ms
[debug] [Loading] Scanning directory C:\Users\usman\OneDrive\Desktop\addressapp
[debug]       Load.loadUnit: mkEval took 0.6006ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 18.3598 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 76.5339ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\usman\OneDrive\Desktop\addressapp, plugins: List(<none>))) took 99.4297ms
[debug] [Loading] Done in C:\Users\usman\OneDrive\Desktop\addressapp, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 5897.1097ms
[debug]     Load.loadUnit: cleanEvalClasses took 34.5891ms
[debug]   Load.loadUnit(file:/C:/Users/usman/OneDrive/Desktop/addressapp/, ...) took 9924.568ms
[debug] Load.apply: load took 9929.8715ms
[debug] Load.apply: resolveProjects took 0.227ms
[debug] Load.apply: finalTransforms took 61.8989ms
[debug] Load.apply: config.delegates took 0.6387ms
[debug] Load.apply: Def.make(settings)... took 197.7487ms
[debug] Load.apply: structureIndex took 47.6031ms
[debug] Load.apply: mkStreams took 0.0047ms
[info] set current project to addressapp (in build file:/C:/Users/usman/OneDrive/Desktop/addressapp/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 56507 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 56507, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to addressapp (in build file:/C:/Users/usman/OneDrive/Desktop/addressapp/)
[debug] > Exec(idea-shell, None, None)
