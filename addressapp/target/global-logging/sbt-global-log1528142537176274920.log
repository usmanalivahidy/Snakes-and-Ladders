[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\usman\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\usman\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 1.8.0_361)
[debug]       Load.loadUnit: plugins took 98.3999ms
[debug]       Load.loadUnit: defsScala took 0.4835ms
[debug] [Loading] Scanning directory C:\Users\usman\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\usman\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 16.2355 ms
[debug]           Load.resolveProject(global-plugins) took 198.2818ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\usman\.sbt\1.0\plugins, plugins: List(<none>))) took 240.8746ms
[debug] [Loading] Done in C:\Users\usman\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 259.9902ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2575ms
[debug]     Load.loadUnit(file:/C:/Users/usman/.sbt/1.0/plugins/, ...) took 367.2662ms
[debug]   Load.apply: load took 558.2262ms
[debug]   Load.apply: resolveProjects took 7.5858ms
[debug]   Load.apply: finalTransforms took 196.3605ms
[debug]   Load.apply: config.delegates took 9.8661ms
[debug]   Load.apply: Def.make(settings)... took 590.1907ms
[debug]   Load.apply: structureIndex took 185.6544ms
[debug]   Load.apply: mkStreams took 2.6484ms
[info] loading global plugins from C:\Users\usman\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3682.0696ms
[debug]           Load.loadUnit: plugins took 38.0735ms
[debug]           Load.loadUnit: defsScala took 0.008ms
[debug] [Loading] Scanning directory C:\Users\usman\OneDrive\Desktop\addressapp\project
[debug]             Load.loadUnit: mkEval took 11.2002ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\usman\OneDrive\Desktop\addressapp\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.6743 ms
[info] loading settings for project addressapp-build from idea.sbt ...
[debug]               Load.resolveProject(addressapp-build) took 8.8972ms
[debug]             Load.loadTransitive: finalizeProject(Project(id addressapp-build, base: C:\Users\usman\OneDrive\Desktop\addressapp\project, plugins: List(<none>))) took 14.9165ms
[debug] [Loading] Done in C:\Users\usman\OneDrive\Desktop\addressapp\project, returning: (addressapp-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 281.8574ms
[debug]           Load.loadUnit: cleanEvalClasses took 11.7518ms
[debug]         Load.loadUnit(file:/C:/Users/usman/OneDrive/Desktop/addressapp/project/, ...) took 334.9094ms
[debug]       Load.apply: load took 338.1981ms
[debug]       Load.apply: resolveProjects took 0.2408ms
[debug]       Load.apply: finalTransforms took 12.7037ms
[debug]       Load.apply: config.delegates took 0.7583ms
[debug]       Load.apply: Def.make(settings)... took 109.1936ms
[debug]       Load.apply: structureIndex took 36.2947ms
[debug]       Load.apply: mkStreams took 0.0049ms
[info] loading project definition from C:\Users\usman\OneDrive\Desktop\addressapp\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1033.5716ms
[debug]     Load.loadUnit: defsScala took 0.0037ms
[debug] [Loading] Scanning directory C:\Users\usman\OneDrive\Desktop\addressapp
[debug]       Load.loadUnit: mkEval took 0.6064ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.3879 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 46.5505ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\usman\OneDrive\Desktop\addressapp, plugins: List(<none>))) took 54.286ms
[debug] [Loading] Done in C:\Users\usman\OneDrive\Desktop\addressapp, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 190.5157ms
[debug]     Load.loadUnit: cleanEvalClasses took 9.4509ms
[debug]   Load.loadUnit(file:/C:/Users/usman/OneDrive/Desktop/addressapp/, ...) took 1234.3653ms
[debug] Load.apply: load took 1237.2624ms
[debug] Load.apply: resolveProjects took 0.3064ms
[debug] Load.apply: finalTransforms took 37.233ms
[debug] Load.apply: config.delegates took 0.5287ms
[debug] Load.apply: Def.make(settings)... took 110.7917ms
[debug] Load.apply: structureIndex took 29.6529ms
[debug] Load.apply: mkStreams took 0.0044ms
[info] set current project to addressapp (in build file:/C:/Users/usman/OneDrive/Desktop/addressapp/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57275 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57275, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to addressapp (in build file:/C:/Users/usman/OneDrive/Desktop/addressapp/)
[debug] > Exec(idea-shell, None, None)
