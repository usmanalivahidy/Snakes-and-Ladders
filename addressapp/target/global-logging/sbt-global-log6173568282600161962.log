[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\usman\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\usman\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 1.8.0_361)
[debug]       Load.loadUnit: plugins took 171.8574ms
[debug]       Load.loadUnit: defsScala took 0.5846ms
[debug] [Loading] Scanning directory C:\Users\usman\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\usman\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 191.6166 ms
[debug]           Load.resolveProject(global-plugins) took 99.3133ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\usman\.sbt\1.0\plugins, plugins: List(<none>))) took 343.3765ms
[debug] [Loading] Done in C:\Users\usman\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 391.6737ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.664ms
[debug]     Load.loadUnit(file:/C:/Users/usman/.sbt/1.0/plugins/, ...) took 583.3449ms
[debug]   Load.apply: load took 1076.493ms
[debug]   Load.apply: resolveProjects took 16.0307ms
[debug]   Load.apply: finalTransforms took 114.446ms
[debug]   Load.apply: config.delegates took 14.3052ms
[debug]   Load.apply: Def.make(settings)... took 755.4987ms
[debug]   Load.apply: structureIndex took 130.7236ms
[debug]   Load.apply: mkStreams took 2.6878ms
[info] loading global plugins from C:\Users\usman\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4542.1962ms
[debug]           Load.loadUnit: plugins took 82.9084ms
[debug]           Load.loadUnit: defsScala took 0.0204ms
[debug] [Loading] Scanning directory C:\Users\usman\OneDrive\Desktop\addressapp\project
[debug]             Load.loadUnit: mkEval took 23.6863ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\usman\OneDrive\Desktop\addressapp\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.2653 ms
[info] loading settings for project addressapp-build from idea1.sbt ...
[debug]               Load.resolveProject(addressapp-build) took 12.0707ms
[debug]             Load.loadTransitive: finalizeProject(Project(id addressapp-build, base: C:\Users\usman\OneDrive\Desktop\addressapp\project, plugins: List(<none>))) took 17.2097ms
[debug] [Loading] Done in C:\Users\usman\OneDrive\Desktop\addressapp\project, returning: (addressapp-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 480.6082ms
[debug]           Load.loadUnit: cleanEvalClasses took 11.5304ms
[debug]         Load.loadUnit(file:/C:/Users/usman/OneDrive/Desktop/addressapp/project/, ...) took 577.9951ms
[debug]       Load.apply: load took 581.2506ms
[debug]       Load.apply: resolveProjects took 0.2766ms
[debug]       Load.apply: finalTransforms took 13.481ms
[debug]       Load.apply: config.delegates took 0.982ms
[debug]       Load.apply: Def.make(settings)... took 165.0161ms
[debug]       Load.apply: structureIndex took 90.0043ms
[debug]       Load.apply: mkStreams took 0.0043ms
[info] loading project definition from C:\Users\usman\OneDrive\Desktop\addressapp\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1976.1781ms
[debug]     Load.loadUnit: defsScala took 0.0089ms
[debug] [Loading] Scanning directory C:\Users\usman\OneDrive\Desktop\addressapp
[debug]       Load.loadUnit: mkEval took 1.5966ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 5.8706 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 56.5081ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\usman\OneDrive\Desktop\addressapp, plugins: List(<none>))) took 65.2881ms
[debug] [Loading] Done in C:\Users\usman\OneDrive\Desktop\addressapp, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 255.509ms
[debug]     Load.loadUnit: cleanEvalClasses took 8.8709ms
[debug]   Load.loadUnit(file:/C:/Users/usman/OneDrive/Desktop/addressapp/, ...) took 2241.8119ms
[debug] Load.apply: load took 2244.2971ms
[debug] Load.apply: resolveProjects took 0.17ms
[debug] Load.apply: finalTransforms took 62.4157ms
[debug] Load.apply: config.delegates took 0.5578ms
[debug] Load.apply: Def.make(settings)... took 160.2742ms
[debug] Load.apply: structureIndex took 40.2395ms
[debug] Load.apply: mkStreams took 0.0046ms
[info] set current project to addressapp (in build file:/C:/Users/usman/OneDrive/Desktop/addressapp/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57275 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57275, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to addressapp (in build file:/C:/Users/usman/OneDrive/Desktop/addressapp/)
[debug] > Exec(idea-shell, None, None)
